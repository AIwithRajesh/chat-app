// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int              @id @default(autoincrement())
  username     String           @unique
  email        String           @unique
  passwordHash String
  avatarUrl    String?
  createdAt    DateTime         @default(now())

  messages     Message[]       @relation("UserMessages")
  chats        ChatParticipant[]
}

model Chat {
  id             Int               @id @default(autoincrement())
  name           String?
  isGroup        Boolean           @default(false)
  createdAt      DateTime          @default(now())

  participants   ChatParticipant[]
  messages       Message[]
}

model ChatParticipant {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  joinedAt  DateTime @default(now())

  @@unique([chatId, userId])
}

model Message {
  id         Int      @id @default(autoincrement())
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     Int
  sender     User     @relation("UserMessages",fields: [senderId], references: [id])
  senderId   Int
  content    String?
  mediaUrl   String?
  sentAt     DateTime @default(now())

  media      Media[]
}

model Media {
  id         Int      @id @default(autoincrement())
  message    Message  @relation(fields: [messageId], references: [id])
  messageId  Int
  url        String
  type       String
  uploadedAt DateTime @default(now())
}
